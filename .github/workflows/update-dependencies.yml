name: Update Go Dependencies
on:
  schedule:
    - cron: '0 0 * * 1'  # Запуск каждую неделю в понедельник в 00:00 UTC
  workflow_dispatch:      # Возможность ручного запуска
permissions:
  contents: write        # Разрешение на запись содержимого
  pull-requests: write   # Явное разрешение на создание PR
jobs:
  update:
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu
    
    timeout-minutes: 30     # Добавляем таймаут для предотвращения зависания
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # Загружаем всю историю
      
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true       # Включаем кэширование модулей
      
      - name: Check go.mod and go.sum exist
        run: |
          if [ ! -f go.mod ]; then
            echo "Error: go.mod file not found"
            exit 1
          fi
          
          if [ ! -f go.sum ]; then
            echo "go.sum file not found, initializing it..."
            go mod tidy
          fi
      
      - name: Clean Go module cache
        run: |
          go clean -modcache
          go clean -cache
      
      - name: Update dependencies
        id: update
        run: |
          set -euo pipefail  # Строгий режим для bash
          
          echo "Updating Go dependencies with specific exclusions..."
          
          # Эти модули вызывают ошибки при обновлении, поэтому исключаем их
          EXCLUDE_LIST=(
            "github.com/mymmrac/telego"
            "gvisor.dev/gvisor"
            "github.com/bos-hieu/mongostore"
            "github.com/googleapis/gnostic"
            "honnef.co/go/tools"
            "k8s.io/api"
            "k8s.io/apimachinery"
            "k8s.io/client-go"
            "github.com/BurntSushi/toml"
            "github.com/davecgh/go-spew"
          )
          
          # Получаем список всех модулей
          ALL_MODULES=$(go list -m all | awk '{print $1}')
          
          # Фильтруем список, исключая проблемные модули
          MODULES_TO_UPDATE=""
          for module in $ALL_MODULES; do
            EXCLUDE=false
            for excluded in "${EXCLUDE_LIST[@]}"; do
              if [[ "$module" == "$excluded" ]]; then
                EXCLUDE=true
                break
              fi
            done
            
            if [[ "$EXCLUDE" == "false" ]]; then
              MODULES_TO_UPDATE="$MODULES_TO_UPDATE $module"
            fi
          done
          
          # Обновляем отфильтрованные модули
          echo "Updating filtered modules"
          for module in $MODULES_TO_UPDATE; do
            go get -u $module || echo "Failed to update $module, continuing..."
          done
          
          # Исправляем прямые зависимости для проблемных модулей
          echo "Fixing module path issues..."
          if grep -q "github.com/bos-hieu/mongostore" go.mod; then
            go get github.com/laziness-coders/mongostore@latest
            # Заменяем ссылки в исходном коде, если необходимо
            find . -type f -name "*.go" -exec sed -i 's|github.com/bos-hieu/mongostore|github.com/laziness-coders/mongostore|g' {} \;
          fi
          
          if grep -q "github.com/googleapis/gnostic" go.mod; then
            go get github.com/google/gnostic@latest
            # Заменяем ссылки в исходном коде, если необходимо
            find . -type f -name "*.go" -exec sed -i 's|github.com/googleapis/gnostic|github.com/google/gnostic|g' {} \;
          fi
          
          # Выполняем go mod tidy для окончательной фиксации зависимостей
          go mod tidy
          go mod verify || exit 1
          
          echo "Updated dependencies list:"
          go list -m all
      
      - name: Check for changes
        id: check
        run: |
          if git status --porcelain | grep -qE "go\.mod|go\.sum|vendor"; then
            echo "changes=true" >> $GITHUB_OUTPUT
            git diff go.mod || true
            echo "Changes detected in dependencies"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          fi
      
      - name: Configure Git
        if: steps.check.outputs.changes == 'true'
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Commit changes directly
        if: steps.check.outputs.changes == 'true'
        run: |
          # Создаем новую ветку
          git checkout -b update-deps-$(date +%Y%m%d)
          
          # Добавляем изменения
          git add go.mod go.sum vendor/ || true
          
          # Коммитим изменения
          git commit -m "chore(deps): update Go dependencies"
          
          # Пушим ветку
          git push origin update-deps-$(date +%Y%m%d)
      
      - name: Create Pull Request
        if: steps.check.outputs.changes == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH_NAME="update-deps-$(date +%Y%m%d)"
          
          # Используем gh CLI для создания PR
          gh pr create \
            --base main \
            --head $BRANCH_NAME \
            --title "Update Go dependencies" \
            --body "# Автоматическое обновление зависимостей Go
            Это PR создан автоматически для обновления зависимостей Go.
